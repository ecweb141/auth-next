generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://ai-chat:chetan!2@cluster0.nr2xx20.mongodb.net/sharedFiles"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  Account        Account[]
  userName       String?
  lastName       String?
  firstName      String?
  email          String    @unique
  hashedPassword String?
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  SharedData SharedData[]

  Folders Folder[]
}

model Folder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @db.String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  files     file[]
}

model file {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  file        String
  description String?
  title       String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  password    String
  Folder      Folder   @relation(fields: [folderId], references: [id])
  folderId    String   @db.ObjectId

  Shared   Shared? @relation(fields: [sharedId], references: [id])
  sharedId String? @db.ObjectId
}

model Shared {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  file       file[]
  sharedData SharedData[]
}

model SharedData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  to        String
  file      String
  createdAt DateTime @default(now())
  sender    User     @relation(fields: [senderID], references: [id])
  senderID  String   @db.ObjectId
  Shared    Shared   @relation(fields: [sharedId], references: [id])
  sharedId  String   @db.ObjectId
}
